{"version":3,"sources":["components/Context/index.js","config/index.js","components/SearchForm.js","components/Nav.js","components/Photo.js","components/NotFound.js","components/PhotoList.js","components/Error404.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","Provider","state","data","query","resultsLoaded","fetch","then","result","json","setState","photos","photo","catch","err","console","error","finally","value","this","actions","performSearch","bind","props","children","Component","Consumer","SearchForm","handleSubmit","e","preventDefault","path","history","push","className","onSubmit","type","name","placeholder","ref","input","required","fill","height","viewBox","width","xmlns","d","withRouter","Nav","to","Photo","src","url","alt","NotFound","PhotoList","match","params","searchTerm","photoList","length","map","server","id","secret","title","key","Error404","App","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.537010ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport apiKey from './../../config/';\r\n\r\nconst Context = React.createContext();\r\n\r\n/**\r\n * Provider that handles the fetching and storing of data.\r\n */\r\n\r\nexport class Provider extends Component {\r\n    \r\n    state = {\r\n        data: [],\r\n        query: \"\",\r\n        resultsLoaded: false\r\n    }\r\n\r\n    /**\r\n     * Fetches 24 pictures from the flickr API based on the given query\r\n     * \r\n     * @param {string} query - The string to search for.\r\n     */\r\n    performSearch(query) {\r\n        fetch(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&text=${query}&per_page=24&format=json&nojsoncallback=1`)\r\n            .then(result => result.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    data: json.photos.photo,\r\n                    query: query\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error(\"Unable to fetch images.\", err);\r\n            })\r\n            .finally(() => {\r\n                this.setState({\r\n                    resultsLoaded: true\r\n                });\r\n            });\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <Context.Provider value={{\r\n                data: this.state.data,\r\n                resultsLoaded: this.state.resultsLoaded,\r\n                query: this.state.query,\r\n                actions: {\r\n                    performSearch: this.performSearch.bind(this)\r\n                }\r\n              }}>\r\n                  { this.props.children }\r\n              </Context.Provider>\r\n        );\r\n    }\r\n}\r\nexport const Consumer = Context.Consumer;","const apiKey = '7651e027fa775f1e35c3829df1d10eb6';\r\n//const apiSecret = '7733daf9ae6f693b';\r\nexport default apiKey;","import React, {Component} from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass SearchForm extends Component {\r\n    \r\n    /**\r\n     * Retreives the search query and redirects to /search/<query>\r\n     * \r\n     * @param {object} e - The event triggered \r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let query = this.query.value;\r\n        let path = `/search/${query}`;\r\n        this.props.history.push(path);\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n                <input type=\"search\" name=\"search\" placeholder=\"Search\" ref={(input) => this.query = input} required />\r\n                <button type=\"submit\" className=\"search-button\">\r\n                    <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                    </svg>\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SearchForm);","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\n\r\nconst Nav = () => {\r\n    return(\r\n        <nav className=\"main-nav\">\r\n            <ul>\r\n                <li>\r\n                    <NavLink to=\"/cats\">Cats</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/dogs\">Dogs</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/computers\">Computers</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nconst Photo = (props) => {\r\n    return(\r\n        <li>\r\n            <img src={props.url} alt={props.alt} />\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Photo;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return(\r\n        <li className=\"not-found\">\r\n            <h3>No Results Found</h3>\r\n            <p>Your search did not return any results. Please try again.</p>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\n\r\nimport { Consumer } from './Context';\r\nimport Photo from './Photo';\r\nimport NotFound from './NotFound';\r\n\r\n/**\r\n * Performs the search if it's not already performed, then\r\n * displays the results on the page.\r\n * Uses a consumer to retreive the data from the provider.\r\n */\r\n\r\nconst PhotoList = ({match}) => {\r\n\r\n    return(\r\n        <Consumer>\r\n            { ({data, resultsLoaded, query, actions}) => {\r\n                    if(match.params.searchTerm !== query){\r\n                        resultsLoaded = false;\r\n                        actions.performSearch(match.params.searchTerm);\r\n                    }\r\n                    /**\r\n                     * Shows a loading screen until the pictures are displayed.\r\n                     */\r\n                    if(!resultsLoaded){\r\n                        return(\r\n                            <div>\r\n                                <h2>Loading...</h2>\r\n                            </div>\r\n                        );\r\n                    }\r\n                    let photoList = (<NotFound />);\r\n                    if(data.length){\r\n                        photoList = data.map(photo => {\r\n                            const url = `https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`;\r\n                            return(\r\n                                <Photo url={url} alt={photo.title} key={photo.id} />\r\n                            );\r\n                        });\r\n                    }\r\n                    return(\r\n                        <div className=\"photo-container\">\r\n                            <h2>{query}</h2>\r\n                            <ul>\r\n                                {photoList}\r\n                            </ul>\r\n                        </div>\r\n                    );\r\n                \r\n                }\r\n            }\r\n        </Consumer>\r\n        \r\n    );\r\n}\r\n\r\nexport default PhotoList;","import React from 'react';\r\n\r\nconst Error404 = () => {\r\n    return(\r\n        <li className=\"not-found\">\r\n            <h3>Error: 404</h3>\r\n            <p>Page Not Found. Seems like we lost your page. OOPS! Please try again...</p>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Error404;","import React, {Component} from 'react';\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';\n\n\n\nimport SearchForm from './components/SearchForm';\nimport Nav from './components/Nav';\nimport PhotoList from './components/PhotoList';\nimport Error404 from './components/Error404';\n\nclass App extends Component {\n  render(){\n    return (\n      <BrowserRouter>\n        <div>\n          <SearchForm />\n          <Nav />\n          <Switch>\n            <Route path=\"/search/:searchTerm\" component={PhotoList} />\n            <Redirect to=\"/search/cats\" path=\"/cats\" />\n            <Redirect to=\"/search/dogs\" path=\"/dogs\" />\n            <Redirect to=\"/search/computers\" path=\"/computers\" />\n            <Redirect to=\"/cats\" exact path=\"/\" />\n            <Route component={Error404} />\n          </Switch>\n\n        </div>\n        \n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from './components/Context';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}